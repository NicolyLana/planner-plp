<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">

<main>
  <section id="planner">
    <div class="calendar">
      <div class="calendar-header">
        <button id="prevMonth">
          <%= image_tag 'Vector_direito.svg', alt: 'Vector_direito' %>
        </button>
        <h2 id="monthYear"></h2>
        <button class="calendar-mes" id="nextMonth">
          <%= image_tag 'Vector_esquerdo.svg', alt: 'Vector_esquerdo' %>
        </button>
      </div>
      <table class="calendar-table">
        <thead>
          <tr>
            <th>Domingo</th>
            <th>Segunda</th>
            <th>Terça</th>
            <th>Quarta</th>
            <th>Quinta</th>
            <th>Sexta</th>
            <th>Sábado</th>
          </tr>
        </thead>
        <tbody id="calendarBody">
        </tbody>
      </table>
    </div>
    
    <div class="sidebar">
      <%= link_to 'Adicionar tarefa', new_tarefa_path, class: 'btn-tarefa' %>
      <%= link_to 'Adicionar meta', new_meta_path, class: 'btn-meta' %>
      <%= link_to 'Emitir relatórios', emitir_relatorio_path, class: 'btn-relatorios' %>
      <div class="task-chart">
        <canvas id="chartTarefas"></canvas>
      </div>
    </div>

    <div class="navigate">
      <h3>Navegar para</h3>
      <div class="navigate-select">
        <select id="monthSelect">
          <option value="0">Janeiro</option>
          <option value="1">Fevereiro</option>
          <option value="2">Março</option>
          <option value="3">Abril</option>
          <option value="4">Maio</option>
          <option value="5">Junho</option>
          <option value="6">Julho</option>
          <option value="7" selected>Agosto</option>
          <option value="8">Setembro</option>
          <option value="9">Outubro</option>
          <option value="10">Novembro</option>
          <option value="11">Dezembro</option>
        </select>
        <select id="yearSelect">
          <option value="2023">2023</option>
          <option value="2024" selected>2024</option>
          <option value="2025">2025</option>
          <option value="2026">2026</option>
          <option value="2027">2027</option>
        </select>
      </div>
      <button id="navigateBtn" class="navigate-btn">Navegar</button>
    </div>
  </section>

  <!-- Modal -->
  <div id="infoModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2 id="modalTitle"></h2>
      <p id="modalDescription"></p>
      <button id="markCompleteBtn">Marcar como Concluída</button>
    </div>
  </div>

</main>

<canvas id="myChart" width="400" height="200"></canvas>
<script>
$(document).ready(function() {
  toastr.success('Página carregada com sucesso!');

  const monthNames = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
  let currentDate = new Date();
  let tarefasData = {}; // Variável global para armazenar as tarefas
  let currentItemId = null; // Para armazenar o ID do item clicado

  const categoriaClasses = {
    1: 'tarefa-diaria',
    2: 'prazo-entrega',
    3: 'aulas',
    4: 'trabalhos',
    5: 'revisoes',
    6: 'provas',
    7: 'exercicios',
    8: 'saude',
    9: 'hobbies',
    10: 'tempo-familia',
    11: 'contas-pagar',
    12: 'orcamento',
    13: 'investimentos',
    14: 'metas-longo-prazo',
    15: 'metas-curto-prazo',
    16: 'habitos',
    17: 'viagens',
    18: 'filmes-series',
    19: 'eventos-sociais'
  };

  const statusColors = {
    pendente: 'yellow',
    concluida: 'green',
    andamento: 'blue'
  };

  function formatNumber(num) {
    return num < 10 ? '0' + num : num;
  }

  function renderCalendar(date, tarefas, metas) {
    tarefasData = tarefas; // Armazenar tarefas para acesso posterior

    const month = date.getMonth();
    const year = date.getFullYear();
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    $('#monthYear').text(`${monthNames[month]} - ${year}`);
    $('#calendarBody').empty();

    let dateCell = 1;
    for (let i = 0; i < 6; i++) {
      let row = $('<tr></tr>');
      for (let j = 0; j < 7; j++) {
        if (i === 0 && j < firstDay) {
          row.append('<td></td>');
        } else if (dateCell > daysInMonth) {
          break;
        } else {
          const cellDate = `${year}-${formatNumber(month + 1)}-${formatNumber(dateCell)}`;
          let cellContent = `<td style="text-align: left;">${formatNumber(dateCell)}`;

          // Verifica se há tarefas para essa data
          if (tarefas[cellDate]) {
            const tarefasDia = tarefas[cellDate];
            tarefasDia.forEach(tarefa => {
              const categoriaClass = categoriaClasses[tarefa.categoria_id];
              cellContent += `
                <div class="${categoriaClass} tarefa-item" data-id="${tarefa.id}" data-type="tarefa">
                  ${tarefa.descricao}
                </div>`;
            });
          }

          // Verifica se há metas para essa data
          if (metas[cellDate]) {
            const metasDia = metas[cellDate];
            metasDia.forEach(meta => {
              const categoriaClass = categoriaClasses[meta.categoria_id];
              cellContent += `
                <div class="${categoriaClass} meta-item" data-id="${meta.id}" data-type="meta">
                  ${meta.descricao}
                </div>`;
            });
          }

          cellContent += `</td>`;
          row.append(cellContent);
          dateCell++;
        }
      }
      $('#calendarBody').append(row);
    }
  }

  function fetchTarefasAndMetasAndRenderCalendar(date) {
    $.ajax({
      url: '/tarefas.json',
      method: 'GET',
      success: function(tarefas) {
        $.ajax({
          url: '/metas.json',
          method: 'GET',
          success: function(metas) {
            renderCalendar(date, tarefas, metas);
          },
          error: function() {
            toastr.error('Erro ao carregar metas.');
          }
        });
      },
      error: function() {
        toastr.error('Erro ao carregar tarefas.');
      }
    });
  }

  $('#prevMonth').click(function() {
    currentDate.setMonth(currentDate.getMonth() - 1);
    fetchTarefasAndMetasAndRenderCalendar(currentDate);
  });

  $('#nextMonth').click(function() {
    currentDate.setMonth(currentDate.getMonth() + 1);
    fetchTarefasAndMetasAndRenderCalendar(currentDate);
  });

  $('#navigateBtn').click(function() {
    const selectedMonth = parseInt($('#monthSelect').val(), 10);
    const selectedYear = parseInt($('#yearSelect').val(), 10);
    currentDate.setMonth(selectedMonth);
    currentDate.setFullYear(selectedYear);
    fetchTarefasAndMetasAndRenderCalendar(currentDate);
  });

  fetchTarefasAndMetasAndRenderCalendar(currentDate);

  // Função para abrir o modal
  function openModal(title, description, id, type) {
    $('#modalTitle').text(title);
    $('#modalDescription').text(description);
    currentItemId = id;
    $('#infoModal').show();
  }

  // Evento de clique para mostrar o modal com detalhes
  $(document).on('click', '.tarefa-item, .meta-item', function() {
    const title = $(this).data('type') === 'tarefa' ? 'Tarefa' : 'Meta';
    const description = $(this).text().trim();
    const id = $(this).data('id');
    openModal(title, description, id, $(this).data('type'));
  });

  // Evento de clique para marcar como concluída
  $('#markCompleteBtn').click(function() {
    const type = $('.modal-content').data('type');
    const url = type === 'tarefa' ? `/tarefas/${currentItemId}/marcar_como_concluida` : `/metas/${currentItemId}/marcar_como_concluida`;

    $.ajax({
      url: url,
      method: 'PATCH',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      success: function(response) {
        if (response.success) {
          toastr.success(response.message);
          $('#infoModal').hide();
          $(`div[data-id="${currentItemId}"]`).remove(); // Remove o item do calendário
        } else {
          toastr.error('Erro ao concluir.');
        }
      },
      error: function() {
        toastr.error('Erro ao se comunicar com o servidor.');
      }
    });
  });

  // Evento de clique para fechar o modal
  $('.close').click(function() {
    $('#infoModal').hide();
  });

  // Fechar o modal ao clicar fora dele
  $(window).click(function(event) {
    if ($(event.target).is('#infoModal')) {
      $('#infoModal').hide();
    }
  });
});
</script>

<style>
/* Estilo do Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 30%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>

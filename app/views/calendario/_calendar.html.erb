<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">


<div class="background-image">
  <%= image_tag 'Calendario.jpg', alt: 'Fundo do Planner' %>
</div>

<main>
  <section id="planner">
    <div class="calendar">
      <div class="calendar-header">
        <button id="prevMonth">
          <%= image_tag 'Vector_direito.svg', alt: 'Vector_direito' %>
        </button>
        <h2 id="monthYear"></h2>
        <button class="calendar-mes" id="nextMonth">
          <%= image_tag 'Vector_esquerdo.svg', alt: 'Vector_esquerdo' %>
        </button>
      </div>
      <table class="calendar-table">
        <thead>
          <tr>
            <th>Domingo</th>
            <th>Segunda</th>
            <th>Terça</th>
            <th>Quarta</th>
            <th>Quinta</th>
            <th>Sexta</th>
            <th>Sábado</th>
          </tr>
        </thead>
        <tbody id="calendarBody">
        </tbody>
      </table>
    </div>
    
    <div class="sidebar">
      <%= link_to 'Adicionar Tarefa', new_tarefa_path, class: 'btn-tarefa' %>
      <%= link_to 'Adicionar Meta', new_meta_path, class: 'btn-meta' %>
      <%= link_to 'Relatório', emitir_relatorio_path, class: 'btn-relatorios' %>
      <div class="navigate">
        <h3>Navegar para</h3>
        <div class="navigate-select">
          <select id="monthSelect">
            <option value="0">Janeiro</option>
            <option value="1">Fevereiro</option>
            <option value="2">Março</option>
            <option value="3">Abril</option>
            <option value="4">Maio</option>
            <option value="5">Junho</option>
            <option value="6">Julho</option>
            <option value="7" selected>Agosto</option>
            <option value="8">Setembro</option>
            <option value="9">Outubro</option>
            <option value="10">Novembro</option>
            <option value="11">Dezembro</option>
          </select>
          <select id="yearSelect">
            <option value="2023">2023</option>
            <option value="2024" selected>2024</option>
            <option value="2025">2025</option>
            <option value="2026">2026</option>
            <option value="2027">2027</option>
          </select>
        </div>
        <button id="navigateBtn" class="navigate-btn">Navegar</button>
      </div> 
    </div>
  </section>

  <div id="dayModal" class="modal">
    <div class="modal-content">
      <div style="display: flex; align-items: center; justify-content: center; position: relative; margin-bottom: 10px;">
        <div style="display: flex; gap: 8px; justify-content: center; width: 100%;">
          <%= link_to 'Criar Tarefa', new_tarefa_path, class: 'btn-tarefa', style: 'padding: 6px 14px; font-size: 0.95em;' %>
          <%= link_to 'Criar Meta', new_meta_path, class: 'btn-meta', style: 'padding: 6px 14px; font-size: 0.95em;' %>
        </div>
        <span class="close-modal-btn" style="position: absolute; right: 0; top: 50%; transform: translateY(-50%);">&times;</span>
      </div>
      <h2 id="modalDayTitle">Atividades do dia</h2>
      <ul id="modalTaskList" class="modal-task-list"></ul>
    </div>
  </div>

  <div id="taskModal" class="modal">
    <div class="modal-content">
      <span class="close-task-modal">&times;</span>
      <h2 id="taskModalTitle"></h2>
      <form id="taskEditForm">
        <div id="metaFields" style="display:none;">
          <div class="wrap-inputnew">
            <input type="date" id="metaDataInicio" name="data_inicio" class="inputnew" placeholder=" ">
            <span class="focus-inputnew" data-placeholder="Data Início"></span>
          </div>
          <div class="wrap-inputnew">
            <input type="date" id="metaDataFim" name="data_fim" class="inputnew" placeholder=" ">
            <span class="focus-inputnew" data-placeholder="Data Fim"></span>
          </div>
          <div class="wrap-inputnew">
            <textarea id="metaDescricao" name="descricao" rows="3" class="inputnew" placeholder=" "></textarea>
            <span class="focus-inputnew" data-placeholder="Descrição"></span>
          </div>
          <div class="wrap-inputnew">
            <select id="metaStatus" name="status_id" class="inputnew">
              <option value="1">Pendente</option>
              <option value="2">Em Andamento</option>
              <option value="3">Concluído</option>
            </select>
            <span class="focus-inputnew" data-placeholder="Status"></span>
          </div>
          <div class="wrap-inputnew">
            <select id="metaCategoria" name="categoria_id" class="inputnew">
              <option value="1">Tarefas Diárias</option>
              <option value="2">Prazo de Entrega</option>
              <option value="3">Aulas</option>
              <option value="4">Trabalhos</option>
              <option value="5">Revisões</option>
              <option value="6">Provas</option>
              <option value="7">Exercícios</option>
              <option value="8">Saúde</option>
              <option value="9">Hobbies</option>
              <option value="10">Tempo em Família</option>
              <option value="11">Contas a Pagar</option>
              <option value="12">Orçamento</option>
              <option value="13">Investimentos</option>
              <option value="14">Metas de Longo Prazo</option>
              <option value="15">Metas de Curto Prazo</option>
              <option value="16">Hábitos</option>
              <option value="17">Viagens</option>
              <option value="18">Filmes/Séries</option>
              <option value="19">Eventos Sociais</option>
            </select>
            <span class="focus-inputnew" data-placeholder="Categoria"></span>
          </div>
        </div>
        <div id="tarefaFields" style="display:none;">
          <div class="wrap-inputnew">
            <input type="date" id="tarefaData" name="data" class="inputnew" placeholder=" ">
            <span class="focus-inputnew" data-placeholder="Data"></span>
          </div>
          <div class="wrap-inputnew">
            <textarea id="tarefaDescricao" name="descricao" rows="3" class="inputnew" placeholder=" "></textarea>
            <span class="focus-inputnew" data-placeholder="Descrição"></span>
          </div>
          <div class="wrap-inputnew">
            <input type="text" id="tarefaBloco" name="bloco" class="inputnew" placeholder=" ">
            <span class="focus-inputnew" data-placeholder="Tempo planejado (ex: 30 minutos)"></span>
          </div>
          <div class="wrap-inputnew">
            <select id="tarefaCategoria" name="categoria_id" class="inputnew">
              <option value="1">Tarefas Diárias</option>
              <option value="2">Prazo de Entrega</option>
              <option value="3">Aulas</option>
              <option value="4">Trabalhos</option>
              <option value="5">Revisões</option>
              <option value="6">Provas</option>
              <option value="7">Exercícios</option>
              <option value="8">Saúde</option>
              <option value="9">Hobbies</option>
              <option value="10">Tempo em Família</option>
              <option value="11">Contas a Pagar</option>
              <option value="12">Orçamento</option>
              <option value="13">Investimentos</option>
              <option value="14">Metas de Longo Prazo</option>
              <option value="15">Metas de Curto Prazo</option>
              <option value="16">Hábitos</option>
              <option value="17">Viagens</option>
              <option value="18">Filmes/Séries</option>
              <option value="19">Eventos Sociais</option>
            </select>
            <span class="focus-inputnew" data-placeholder="Categoria"></span>
          </div>
          <div class="wrap-inputnew">
            <select id="tarefaTurno" name="turno" class="inputnew">
              <option value="Manhã">Manhã</option>
              <option value="Tarde">Tarde</option>
              <option value="Noite">Noite</option>
              <option value="Madrugada">Madrugada</option>
            </select>
            <span class="focus-inputnew" data-placeholder="Turno"></span>
          </div>
        </div>
        <div class="container-loginnew-form-btn">
          <button type="submit" id="saveTaskBtn" class="loginnew-form-btn">Salvar Alterações</button>
        </div>
      </form>
  <button id="markCompleteBtn" class="loginnew-form-btn">Marcar como Concluída</button>
    </div>
  </div>
</main>

<canvas id="myChart" width="400" height="200"></canvas>

<script>
  $(document).ready(function() {
    toastr.success('Página carregada com sucesso!');

    const monthNames = ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"];
    let currentDate = new Date();
    let tarefasData = {};
    let metasData = {};

    const categoriaClasses = {
      1: 'tarefa-diaria',
      2: 'prazo-entrega',
      3: 'aulas',
      4: 'trabalhos',
      5: 'revisoes',
      6: 'provas',
      7: 'exercicios',
      8: 'saude',
      9: 'hobbies',
      10: 'tempo-familia',
      11: 'contas-pagar',
      12: 'orcamento',
      13: 'investimentos',
      14: 'metas-longo-prazo',
      15: 'metas-curto-prazo',
      16: 'habitos',
      17: 'viagens',
      18: 'filmes-series',
      19: 'eventos-sociais'
    };

    function formatNumber(num) {
      return num < 10 ? '0' + num : num;
    }

    function renderCalendar(date, tarefas, metas) {
      tarefasData = tarefas;
      metasData = metas;

      const month = date.getMonth();
      const year = date.getFullYear();
      const firstDay = new Date(year, month, 1).getDay();
      const daysInMonth = new Date(year, month + 1, 0).getDate();

      $('#monthYear').text(`${monthNames[month]} - ${year}`);
      $('#calendarBody').empty();

      let dateCell = 1;
      for (let i = 0; i < 6; i++) {
        let row = $('<tr></tr>');
        for (let j = 0; j < 7; j++) {
          if (i === 0 && j < firstDay) {
            row.append('<td></td>');
          } else if (dateCell > daysInMonth) {
            break;
          } else {
            const cellDate = `${year}-${formatNumber(month + 1)}-${formatNumber(dateCell)}`;
            let cellContent = `<td data-date="${cellDate}" class="day-cell"><span>${formatNumber(dateCell)}</span>`;

            const todosItensDoDia = (tarefas[cellDate] || []).concat(metas[cellDate] || []);
            const itensParaMostrar = 2;
            const maisItens = todosItensDoDia.length - itensParaMostrar;

            if (todosItensDoDia.length > 0) {
              todosItensDoDia.slice(0, itensParaMostrar).forEach(item => {
                const itemType = item.hasOwnProperty('data') ? 'tarefa' : 'meta';
                const categoriaClass = categoriaClasses[item.categoria_id];
                cellContent += `
                  <div class="${categoriaClass} ${itemType}-item" data-id="${item.id}" data-type="${itemType}" data-description="${item.descricao}">
                    ${item.descricao}
                  </div>`;
              });
              if (maisItens > 0) {
                cellContent += `
                  <div class="ver-todas-btn" data-date="${cellDate}">
                    + ${maisItens}
                  </div>`;
              }
            }
            cellContent += `</td>`;
            row.append(cellContent);
            dateCell++;
          }
        }
        $('#calendarBody').append(row);
      }
    }

    function fetchTarefasAndMetasAndRenderCalendar(date) {
      $.ajax({
        url: '/tarefas.json',
        method: 'GET',
        success: function(tarefas) {
          $.ajax({
            url: '/metas.json',
            method: 'GET',
            success: function(metas) {
              renderCalendar(date, tarefas, metas);
            },
            error: function() {
              toastr.error('Erro ao carregar metas.');
            }
          });
        },
        error: function() {
          toastr.error('Erro ao carregar tarefas.');
        }
      });
    }

    function openDayModal(date) {
      const formattedDate = `${date.getFullYear()}-${formatNumber(date.getMonth() + 1)}-${formatNumber(date.getDate())}`;
      const todosItensDoDia = (tarefasData[formattedDate] || []).concat(metasData[formattedDate] || []);
      
      $('#modalDayTitle').text(`Atividades do dia ${formatNumber(date.getDate())}/${formatNumber(date.getMonth() + 1)}`);
      $('#modalTaskList').empty();

      if (todosItensDoDia.length > 0) {
        todosItensDoDia.forEach(item => {
          const itemType = item.hasOwnProperty('data') ? 'tarefa' : 'meta';
          const categoriaClass = categoriaClasses[item.categoria_id];
          $('#modalTaskList').append(`
            <li class="${categoriaClass} modal-task-item day-modal-item" data-id="${item.id}" data-type="${itemType}">
              <span class="item-desc" style="cursor:pointer; text-decoration:underline;">${item.descricao}</span>
              <button class="complete-btn" data-id="${item.id}" data-type="${itemType}">Concluir</button>
            </li>`);
        });
      } else {
        $('#modalTaskList').append('<li>Nenhuma tarefa ou meta para este dia.</li>');
      }
    // Clique para editar tarefa/meta direto do modal do dia
    $(document).on('click', '.day-modal-item .item-desc', function(e) {
      e.stopPropagation();
      const $li = $(this).closest('.day-modal-item');
      const type = $li.data('type');
      const id = $li.data('id');
      let itemData = null;
      if(type === 'tarefa') {
        for(const date in tarefasData) {
          const tarefa = (tarefasData[date] || []).find(t => t.id == id);
          if(tarefa) { itemData = tarefa; break; }
        }
      } else {
        for(const date in metasData) {
          const meta = (metasData[date] || []).find(m => m.id == id);
          if(meta) { itemData = meta; break; }
        }
      }
      const title = type === 'tarefa' ? 'Tarefa' : 'Meta';
      $('#dayModal').hide();
      openTaskModal(title, itemData ? itemData.descricao : '', id, type, itemData);
    });

      $('#dayModal').show();
    }

    function openTaskModal(title, description, id, type, itemData = null) {
      $('#taskModalTitle').text(title);
      $('#markCompleteBtn').data('id', id).data('type', type);
      // Reset fields
      $('#metaFields, #tarefaFields').hide();
      if(type === 'meta') {
        $('#metaFields').show();
        if(itemData) {
          $('#metaDataInicio').val(itemData.data_inicio);
          $('#metaDataFim').val(itemData.data_fim);
          $('#metaDescricao').val(itemData.descricao);
          $('#metaStatus').val(itemData.status_id);
          $('#metaCategoria').val(itemData.categoria_id);
        }
      } else {
        $('#tarefaFields').show();
        if(itemData) {
          $('#tarefaData').val(itemData.data);
          $('#tarefaDescricao').val(itemData.descricao);
          $('#tarefaBloco').val(itemData.bloco);
          $('#tarefaCategoria').val(itemData.categoria_id);
          $('#tarefaTurno').val(itemData.turno);
        }
      }
      $('#taskModal').show();
    }

    $(document).on('click', '.day-cell, .ver-todas-btn', function(e) {
      if ($(e.target).is('.tarefa-item, .meta-item')) {
          return;
      }
      const dateString = $(this).data('date');
      const date = new Date(dateString + 'T00:00:00');
      openDayModal(date);
    });

    $(document).on('click', '.tarefa-item, .meta-item', function() {
      const type = $(this).data('type');
      const id = $(this).data('id');
      let itemData = null;
      if(type === 'tarefa') {
        // Procurar tarefa no tarefasData
        for(const date in tarefasData) {
          const tarefa = (tarefasData[date] || []).find(t => t.id == id);
          if(tarefa) { itemData = tarefa; break; }
        }
      } else {
        for(const date in metasData) {
          const meta = (metasData[date] || []).find(m => m.id == id);
          if(meta) { itemData = meta; break; }
        }
      }
      const title = type === 'tarefa' ? 'Tarefa' : 'Meta';
      openTaskModal(title, itemData ? itemData.descricao : '', id, type, itemData);
    });
    
    $(document).on('click', '.modal-task-item .complete-btn', function() {
      const id = $(this).data('id');
      const type = $(this).data('type');
      markAsComplete(id, type);
    });


    $(document).on('click', '#markCompleteBtn', function() {
      const id = $(this).data('id');
      const type = $(this).data('type');
      markAsComplete(id, type, true);
    });

    // Salvar alterações do modal (tarefa/meta)
    $(document).on('submit', '#taskEditForm', function(e) {
      e.preventDefault();
      const type = $('#markCompleteBtn').data('type');
      const id = $('#markCompleteBtn').data('id');
      let data = {};
      let url = '';
      if(type === 'meta') {
        data = {
          meta: {
            data_inicio: $('#metaDataInicio').val(),
            data_fim: $('#metaDataFim').val(),
            descricao: $('#metaDescricao').val(),
            status_id: $('#metaStatus').val(),
            categoria_id: $('#metaCategoria').val()
          }
        };
        url = `/metas/${id}`;
      } else {
        data = {
          tarefa: {
            data: $('#tarefaData').val(),
            descricao: $('#tarefaDescricao').val(),
            bloco: $('#tarefaBloco').val(),
            categoria_id: $('#tarefaCategoria').val(),
            turno: $('#tarefaTurno').val()
          }
        };
        url = `/tarefas/${id}`;
      }
      $.ajax({
        url: url,
        method: 'PATCH',
        data: data,
        beforeSend: function(xhr) {
          xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        },
        success: function(response) {
          toastr.success('Alterações salvas com sucesso!');
          $('#taskModal').hide();
          fetchTarefasAndMetasAndRenderCalendar(currentDate);
        },
        error: function(xhr) {
          toastr.error('Erro ao salvar alterações.');
        }
      });
    });

    function markAsComplete(id, type, closeTaskModal = false) {
      const url = type === 'tarefa' ? `/tarefas/${id}/marcar_como_concluida` : `/metas/${id}/marcar_como_concluida`;

      $.ajax({
        url: url,
        method: 'PATCH',
        beforeSend: function(xhr) {
          xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        },
        success: function(response) {
          if (response.success) {
            toastr.success(response.message);
            $('#dayModal').hide();
            if(closeTaskModal) {
              $('#taskModal').hide();
            }
            fetchTarefasAndMetasAndRenderCalendar(currentDate);
          } else {
            toastr.error('Erro ao concluir.');
          }
        },
        error: function() {
          toastr.error('Erro ao se comunicar com o servidor.');
        }
      });
    }

    $(document).on('click', '.close-modal-btn', function() {
      $('#dayModal').hide();
    });

    $(document).on('click', '.close-task-modal', function() {
      $('#taskModal').hide();
    });

    $(window).on('click', function(event) {
      if ($(event.target).is('#dayModal')) {
        $('#dayModal').hide();
      }
      if ($(event.target).is('#taskModal')) {
        $('#taskModal').hide();
      }
    });

    $('#prevMonth').click(function() {
      currentDate.setMonth(currentDate.getMonth() - 1);
      fetchTarefasAndMetasAndRenderCalendar(currentDate);
    });

    $('#nextMonth').click(function() {
      currentDate.setMonth(currentDate.getMonth() + 1);
      fetchTarefasAndMetasAndRenderCalendar(currentDate);
    });

    $('#navigateBtn').click(function() {
      const selectedMonth = parseInt($('#monthSelect').val(), 10);
      const selectedYear = parseInt($('#yearSelect').val(), 10);
      currentDate.setMonth(selectedMonth);
      currentDate.setFullYear(selectedYear);
      fetchTarefasAndMetasAndRenderCalendar(currentDate);
    });

    fetchTarefasAndMetasAndRenderCalendar(currentDate);
  });
</script>

<style>
/* Estilo do Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.4));
  background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.4));
}

.modal-content {
  background: rgba(255, 255, 255, 0.15); /* Fundo branco bem transparente */
  backdrop-filter: blur(10px); /* O efeito de desfoque */
  -webkit-backdrop-filter: blur(10px); /* Compatibilidade Safari */
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 30%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>
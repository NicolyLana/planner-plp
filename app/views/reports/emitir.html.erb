<body class="relatorio-body" data-theme="light">
<button id="toggleTheme" class="toggle-btn">üåô Modo Escuro</button>

<div class="relatorio-container">
  <h1 class="titulo-principal">Vis√£o Geral da Produtividade</h1>

  <section class="resumo-section card">
    <h2 class="subtitulo">Resumo</h2>
    <p class="resumo-texto"><strong>Total de Metas:</strong> <%= @total_metas %> | Cumpridas: <%= @metas_cumpridas %> (<%= @porcentagem_metas_cumpridas %>%)</p>
    <p class="resumo-texto"><strong>Total de Tarefas:</strong> <%= @total_tarefas %> | Executadas: <%= @tarefas_executadas %> (<%= @porcentagem_tarefas_executadas %>%)</p>
  </section>

  <section class="produtividade-grafico card">
    <h2 class="subtitulo">Evolu√ß√£o Mensal</h2>
    <canvas id="produtividadeMensal"></canvas>
  </section>

  <section class="produtividade-grafico card">
    <h2 class="subtitulo">Desempenho Semanal</h2>
    <canvas id="produtividadeSemanal"></canvas>
  </section>

  <section class="produtividade-grafico card">
    <h2 class="subtitulo">Distribui√ß√£o por Turnos</h2>
    <canvas id="produtividadeTurnos"></canvas>
  </section>

  <section class="tarefas-categoria card">
    <h2 class="subtitulo">Tarefas por Categoria</h2>
    <% if @tarefas_por_categoria.any? %>
      <table class="tabela-relatorio">
        <thead>
        <tr>
          <th>Categoria</th>
          <th>Tarefas Conclu√≠das</th>
        </tr>
        </thead>
        <tbody>
        <% @tarefas_por_categoria.each do |categoria_id, quantidade| %>
          <tr>
            <td><%= Categoria.find(categoria_id).nome %></td>
            <td><strong><%= quantidade %></strong></td>
          </tr>
        <% end %>
        </tbody>
      </table>
    <% else %>
      <p>N√£o h√° tarefas conclu√≠das por categoria at√© o momento.</p>
    <% end %>
  </section>

  <section class="metas-categoria card">
    <h2 class="subtitulo">Metas por Categoria</h2>
    <% if @metas_por_categoria.any? %>
      <table class="tabela-relatorio">
        <thead>
        <tr>
          <th>Categoria</th>
          <th>Metas Conclu√≠das</th>
        </tr>
        </thead>
        <tbody>
        <% @metas_por_categoria.each do |categoria_id, quantidade| %>
          <tr>
            <td><%= Categoria.find(categoria_id).nome %></td>
            <td><strong><%= quantidade %></strong></td>
          </tr>
        <% end %>
        </tbody>
      </table>
    <% else %>
      <p>N√£o h√° metas conclu√≠das por categoria at√© o momento.</p>
    <% end %>
  </section>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const toggleBtn = document.getElementById('toggleTheme');
    const body = document.body;

    toggleBtn.addEventListener('click', () => {
        body.classList.toggle('dark-theme');
        if (body.classList.contains('dark-theme')) {
            toggleBtn.textContent = '‚òÄÔ∏è Modo Claro';
        } else {
            toggleBtn.textContent = 'üåô Modo Escuro';
        }
        atualizarResumoTema();
        atualizarGraficoTema();
    });

    const resumoTextos = document.querySelectorAll('.resumo-texto');
    function atualizarResumoTema() {
        resumoTextos.forEach(p => {
            p.style.color = body.classList.contains('dark-theme') ? '#ddd' : '#444';
        });
    }
    atualizarResumoTema();

    const tarefasSemanais = <%= @tarefas_por_semana.to_json.html_safe %>;
    const metasMensais = <%= @metas_por_mes.to_json.html_safe %>;
    const tarefasPorTurno = <%= @tarefas_por_turno.to_json.html_safe %>;

    function coresTema() {
        if (body.classList.contains('dark-theme')) {
            return {
                text: '#ddd',
                grid: '#555',
                background: 'rgba(75,192,192,0.2)',
                borderLine: 'rgba(75,192,192,1)',
                barBg: 'rgba(54,162,235,0.5)',
                barBorder: 'rgba(54,162,235,1)',
                pieColors: [
                    'rgba(255,99,132,0.5)',
                    'rgba(54,162,235,0.5)',
                    'rgba(75,192,192,0.5)',
                    'rgba(153,102,255,0.5)'
                ],
                pieBorders: [
                    'rgba(255,99,132,1)',
                    'rgba(54,162,235,1)',
                    'rgba(75,192,192,1)',
                    'rgba(153,102,255,1)'
                ]
            };
        } else {
            return {
                text: '#dcd9d9',
                grid: '#ddd',
                background: 'rgba(75,192,192,0.1)',
                borderLine: 'rgba(75,192,192,1)',
                barBg: 'rgba(54,162,235,0.5)',
                barBorder: 'rgba(54,162,235,1)',
                pieColors: [
                    'rgba(255,99,132,0.5)',
                    'rgba(54,162,235,0.5)',
                    'rgba(75,192,192,0.5)',
                    'rgba(153,102,255,0.5)'
                ],
                pieBorders: [
                    'rgba(255,99,132,1)',
                    'rgba(54,162,235,1)',
                    'rgba(75,192,192,1)',
                    'rgba(153,102,255,1)'
                ]
            };
        }
    }

    // --- Cria√ß√£o dos gr√°ficos ---
    let chartMensal, chartSemanal, chartTurnos;

    function criarGraficos() {
        const cores = coresTema();

        // Evolu√ß√£o Mensal
        chartMensal = new Chart(document.getElementById('produtividadeMensal'), {
            type: 'line',
            data: {
                labels: Object.keys(metasMensais),
                datasets: [{
                    label: 'Metas Cumpridas por M√™s',
                    data: Object.values(metasMensais),
                    fill: false,
                    borderColor: cores.borderLine,
                    backgroundColor: cores.background,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { labels: { color: cores.text } },
                    tooltip: { titleColor: cores.text, bodyColor: cores.text, backgroundColor: '#333' }
                },
                scales: {
                    x: {
                        offset: true,
                        ticks: {
                            color: cores.text,
                            maxRotation: 0,
                            minRotation: 0
                        },
                        grid: { color: cores.grid }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: { color: cores.text },
                        grid: { color: cores.grid }
                    }
                }
            }
        });

        // Desempenho Semanal
        chartSemanal = new Chart(document.getElementById('produtividadeSemanal'), {
            type: 'bar',
            data: {
                labels: Object.keys(tarefasSemanais),
                datasets: [{
                    label: 'Tarefas Conclu√≠das por Semana',
                    data: Object.values(tarefasSemanais),
                    backgroundColor: cores.barBg,
                    borderColor: cores.barBorder,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { labels: { color: cores.text } },
                    tooltip: { titleColor: cores.text, bodyColor: cores.text, backgroundColor: '#333' }
                },
                scales: {
                    x: { ticks: { color: cores.text }, grid: { color: cores.grid } },
                    y: { ticks: { color: cores.text }, grid: { color: cores.grid }, beginAtZero: true }
                }
            }
        });

        // Distribui√ß√£o por Turnos
        const labelsTurnoMap = { 'Madrugada': 0, 'Manh√£': 1, 'Tarde': 2, 'Noite': 3 };
        const sortedTurnos = Object.keys(tarefasPorTurno).sort((a,b) => labelsTurnoMap[a] - labelsTurnoMap[b]);
        const dataTurno = sortedTurnos.map(turno => tarefasPorTurno[turno]);

        chartTurnos = new Chart(document.getElementById('produtividadeTurnos'), {
            type: 'pie',
            data: {
                labels: sortedTurnos,
                datasets: [{
                    label: 'Tarefas por Turno',
                    data: dataTurno,
                    backgroundColor: cores.pieColors,
                    borderColor: cores.pieBorders,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { labels: { color: cores.text } },
                    tooltip: { titleColor: cores.text, bodyColor: cores.text, backgroundColor: '#333' }
                }
            }
        });
    }

    function atualizarGraficoTema() {
        const cores = coresTema();

        [chartMensal, chartSemanal].forEach(chart => {
            chart.options.plugins.legend.labels.color = cores.text;
            chart.options.plugins.tooltip.titleColor = cores.text;
            chart.options.plugins.tooltip.bodyColor = cores.text;
            chart.options.scales.x.ticks.color = cores.text;
            chart.options.scales.x.grid.color = cores.grid;
            chart.options.scales.y.ticks.color = cores.text;
            chart.options.scales.y.grid.color = cores.grid;

            if (chart === chartMensal) {
                chart.data.datasets[0].borderColor = cores.borderLine;
                chart.data.datasets[0].backgroundColor = cores.background;
            } else {
                chart.data.datasets[0].backgroundColor = cores.barBg;
                chart.data.datasets[0].borderColor = cores.barBorder;
            }
            chart.update();
        });

        chartTurnos.data.datasets[0].backgroundColor = cores.pieColors;
        chartTurnos.data.datasets[0].borderColor = cores.pieBorders;
        chartTurnos.options.plugins.legend.labels.color = cores.text;
        chartTurnos.options.plugins.tooltip.titleColor = cores.text;
        chartTurnos.options.plugins.tooltip.bodyColor = cores.text;
        chartTurnos.update();
    }

    criarGraficos();
</script>
</body>
